% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ants-plot.R
\name{ants.plot}
\alias{ants.plot}
\title{Plot an 'ANTsImage'}
\usage{
ants.plot(
  image,
  overlay = NULL,
  blend = FALSE,
  alpha = 1L,
  cmap = "Greys_r",
  overlay_cmap = "turbo",
  overlay_alpha = 0.9,
  vminol = NULL,
  vmaxol = NULL,
  cbar = FALSE,
  cbar_length = 0.8,
  cbar_dx = 0,
  cbar_vertical = TRUE,
  axis = 0L,
  nslices = 12L,
  slices = NULL,
  ncol = NULL,
  slice_buffer = NULL,
  black_bg = TRUE,
  bg_thresh_quant = 0.01,
  bg_val_quant = 0.99,
  domain_image_map = NULL,
  crop = FALSE,
  scale = FALSE,
  reverse = FALSE,
  title = NULL,
  title_fontsize = 20L,
  title_dx = 0,
  title_dy = 0,
  filename = NULL,
  dpi = 500L,
  figsize = 1.5,
  reorient = TRUE,
  resample = TRUE
)
}
\arguments{
\item{image}{'ANTsImage', image to plot}

\item{overlay}{'ANTsImage', image to overlay}

\item{blend}{blend}

\item{alpha}{alpha}

\item{cmap}{string, colormap to use for base image. See matplotlib.}

\item{overlay_cmap}{string, colormap to use for overlay images, if applicable. See matplotlib.}

\item{overlay_alpha}{float, level of transparency for any overlays. Smaller value means the overlay is more transparent. See matplotlib.}

\item{vminol}{vminol}

\item{vmaxol}{vmaxol}

\item{cbar}{cbar}

\item{cbar_length}{cbar_length}

\item{cbar_dx}{cbar_dx}

\item{cbar_vertical}{cbar_vertical}

\item{axis}{integer, which axis to plot along if image is 3D}

\item{nslices}{integer, number of slices to plot if image is 3D}

\item{slices}{slices : list or \code{\link{tuple}} of integers, specific
slice indices to plot if image is 3D. If given, this will override
\code{nslices}. This can be absolute array indices (e.g.
\code{list(80,100,120)}), or this can be relative array indices
(e.g. \code{list(0.4,0.5,0.6)})}

\item{ncol}{integer, number of columns to have on the plot if image is 3D.}

\item{slice_buffer}{integer,
how many slices to buffer when finding the non-zero slices of a 3D images. So, if \code{slice_buffer=10}, then the first slice in a 3D image will be the first non-zero slice index plus 10 more slices.}

\item{black_bg}{boolean:
if TRUE, the background of the image(s) will be black. if FALSE, the background of the image(s) will be determined by the values \code{bg_thresh_quant} and \code{bg_val_quant}.}

\item{bg_thresh_quant}{float
if white_bg=TRUE, the background will be determined by thresholding the image at the \code{bg_thresh} quantile value and setting the background intensity to the \code{bg_val} quantile value. This value should be in \link{0, 1} - somewhere around 0.01 is recommended. - equal to 1 will threshold the entire image - equal to 0 will threshold none of the image}

\item{bg_val_quant}{float:
if white_bg=TRUE, the background will be determined by thresholding the image at the \code{bg_thresh} quantile value and setting the background intensity to the \code{bg_val} quantile value. This value should be in \link{0, 1} - equal to 1 is pure white - equal to 0 is pure black - somewhere in between is gray}

\item{domain_image_map}{'ANTsImage':
this input 'ANTsImage' or list of 'ANTsImage' types contains a reference image \code{domain_image} and optional reference mapping named \code{domainMap}. If supplied, the image(s) to be plotted will be mapped to the domain image space before plotting - useful for non-standard image orientations.}

\item{crop}{boolean:
if true, the image(s) will be cropped to their bounding boxes, resulting in a potentially smaller image size. if false, the image(s) will not be cropped}

\item{scale}{boolean or 2-tuple:
if true, nothing will happen to intensities of image(s) and overlay(s) if false, dynamic range will be maximized when visualizing overlays if 2-list, the image will be dynamically scaled between these quantiles}

\item{reverse}{boolean:
if true, the order in which the slices are plotted will be reversed. This is useful if you want to plot from the front of the brain first to the back of the brain, or vice-versa}

\item{title}{string:
add a title to the plot}

\item{title_fontsize}{title_fontsize}

\item{title_dx}{title_dx}

\item{title_dy}{title_dy}

\item{filename}{string:
if given, the resulting image will be saved to this file}

\item{dpi}{integer:
determines resolution of image if saved to file. Higher values result in higher resolution images, but at a cost of having a larger file size}

\item{figsize}{figsize}

\item{reorient}{reorient}

\item{resample}{bool:
if true, resample image if spacing is very unbalanced.}
}
\description{
Use mask_image and/or threshold_image to preprocess images to be be
overlayed and display the overlays in a given range. See the wiki examples.
By default, images will be reoriented to 'LAI' orientation before plotting.
So, if axis == 0, the images will be ordered from the
left side of the brain to the right side of the brain. If axis == 1,
the images will be ordered from the anterior (front) of the brain to
the posterior (back) of the brain. And if axis == 2, the images will
be ordered from the inferior (bottom) of the brain to the superior (top)
of the brain.
}
\examples{

if(interactive() && ants_available()) {
  np <- import("numpy")
  img <- ants.image_read(ants.get_data('r16'))
  segs <- img$kmeans_segmentation(k = 3L)[['segmentation']]

  # R cannot call python's `==` or "*", hence use `__ne__` and `__mul__`
  overlay <- segs$`__mul__`( segs$`__ne__`(1) )
  ants.plot(img, overlay, crop=TRUE)
}

}
